<?php

namespace Domains\WarehouseProduct\Requests;

use Illuminate\Support\Facades\DB;

/**
 * @property string warehouse_id
 * @property string product_id
 * @property int quantity
 * @property int send_quantity
 * @property int receive_quantity
 * @property string type
 * @property bool is_internal_transfer
 * @property string source
 * @property string destination
 * @property mixed created_at
 * @property mixed updated_at
 */
class WarehouseProductUpdateRequest extends \Illuminate\Foundation\Http\FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'warehouse_id'         => 'required|exists:warehouses,id',
            'product_id'           => 'required|exists:products,id',
            'send_quantity'        => 'integer|min:1|lte:quantity',
            'receive_quantity'     => 'integer|min:1',
            'type'                 => 'required|in:in,out',
            'is_internal_transfer' => 'boolean',
            'source'               => 'nullable|string',
            'destination'          => 'nullable|string',
            'created_at'           => 'nullable|date',
            'updated_at'           => 'nullable|date',
        ];
    }

    public function withValidator($validator)
    {
        $validator->after(function ($validator) {
            $type = $this->input('type');
            $isInternal = filter_var($this->input('is_internal_transfer'), FILTER_VALIDATE_BOOLEAN);
            $destination = $this->input('destination');

            if ($type === 'out') {
                if ($isInternal) {
                    // внутренний перевод: destination должен существовать в списке складов
                    $is_destination_model_exists = DB::table('warehouses')->where('id', $destination)->exists();
                    if (!$destination || !$is_destination_model_exists) {
                        $validator->errors()->add('destination', 'Склад назначения не найден.');
                    }
                } else {
                    // внешний перевод: destination обязателен
                    if (!$destination) {
                        $validator->errors()->add('destination', 'Укажите место назначения.');
                    }
                }
            } else if ($type === 'in') {
                // receive_quantity is required if type is in
                $receive_quantity = $this->input('receive_quantity');
                if ($receive_quantity === null || $receive_quantity < 1) {
                    $validator->errors()->add('receive_quantity', 'Укажите количество для входящего перемещения.');
                }

                // source is required if type is in
                $source = $this->input('source');
                if (!$source) {
                    $validator->errors()->add('source', __('validation.required', ['attribute' => __('app.transaction.source')]));
                }
            }
        });
    }

    public function messages()
    {
        $parent_messages = parent::messages(); // TODO: Change the autogenerated stub

        $locales = config('app.locales');
        $messages = [];
        foreach ($locales as $locale) {
            $messages["name.$locale.required"] = __('validation.required', ['attribute' => __('app.label.names') . " ($locale)"]);
            $messages["name.$locale.string"] = __('validation.string', ['attribute' => __('app.label.names') . " ($locale)"]);
            $messages["name.$locale.min"] = __('validation.min.string', ['attribute' => __('app.label.names') . " ($locale)", 'min' => 3]);
            $messages["name.$locale.max"] = __('validation.max.string', ['attribute' => __('app.label.names') . " ($locale)", 'max' => 255]);
        }

        // Add custom messages for other rules
        $messages['warehouse_id.required'] = __('validation.required', ['attribute' => __('app.label.warehouse')]);
        $messages['warehouse_id.exists'] = __('validation.exists', ['attribute' => __('app.label.warehouse')]);
        // validation.required_if
        $messages['destination.required_if'] = __('validation.required_if', [
            'attribute' => __('app.label.address'),
            'other'     => __('app.label.type'),
            'value'     => 'out',
        ]);
        $messages['send_quantity.lte'] = __('validation.lte', [
            'attribute' => __('app.label.quantity'),
            'value'     => $this->quantity,
        ]);
        $messages['send_quantity.integer'] = __('validation.integer', ['attribute' => __('app.label.quantity')]);
        $messages['send_quantity.min'] = __('validation.min.numeric', ['attribute' => __('app.label.quantity'), 'min' => 1]);
        $messages['send_quantity.required'] = __('validation.required', ['attribute' => __('app.label.quantity')]);

        $messages['receive_quantity.integer'] = __('validation.integer', ['attribute' => __('app.label.quantity')]);
        $messages['receive_quantity.min'] = __('validation.min.numeric', ['attribute' => __('app.label.quantity'), 'min' => 1]);
        $messages['receive_quantity.required'] = __('validation.required', ['attribute' => __('app.label.quantity')]);

        return array_merge($parent_messages, $messages);
    }
}
